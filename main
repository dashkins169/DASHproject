import psycopg2
from psycopg2 import Error
import click
import csv
import os
global mydict

def paren_v_base(name):
    with connection.cursor() as cursor:
        cursor.execute("""SELECT us_name FROM parni""")
        df = cursor.fetchall()
        # print(df)
        for i in df:
            # print(i)
            if i[0] == name:
                return True
            else:
                return False


def hochy_parnia(paren, age, ball, postupok):  # по name определяем есть ли такой парень в базе, далее либо запусаем полное добавление, либо обновление баллов
    r = paren_v_base(paren)
    if r == True:
        print("ваш парень есть в базе и мы добавили ему", ball, "баллов")
        dobav_ballov(paren, age, ball, postupok)
    else:
        print("вы его единственная, ваш парень добавлен в базу")
        dobav_parnia(paren, age, ball, postupok)


def dobav_parnia(paren, ag, bal, postupok): # полное добавление парня
    with connection.cursor() as cursor:

        cursor.execute("""
                INSERT INTO parni(us_name, age, ball, move) VALUES
                    ('Pasha Ilin', 18, 89, '{nemnogo bulil sashy}');
                """)
        connection.commit()

def dobav_ballov(paren, age, bal, postupok):  # если парень существует, то обновим его баллы
        with connection.cursor() as cursor:
            cursor.execute("""UPDATE parni SET ball = ball + bal, move = array_append(move, postupok) WHERE us_name = paren;""")
        connection.commit()


def filter_po_age(znach):
    with open('parni.csv', 'r', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            if int(row['age']) == int(znach):
                print(row['name'], row['age'], row['ball'], row['move'])
    csvfile.close()


def filter_po_ball(znach):
    with open('parni.csv', 'r', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            if int(row['ball']) >= int(znach):
                print(row['name'], row['age'], row['ball'], row['move'])
    csvfile.close()


@click.command()
@click.argument("name", nargs=2, type=str)
# nargs отвечает за кол-во аргументов, которые мы забираем из командной строки - попадают как кортеж
# при nargs = -1 : required - означает что хотя бы один аргумент должен передаться
# type - тип передаваемого аргумента из командной строки

@click.option("--age", "-a", default=18, help="возраст парня")
@click.option("--ball", "-b", default=0, help="баллы парня")
# --ball - вызывает считывание из командной сторки,
# "ball" - переменная куда все это сохраняется
# defalt=0 - подставляет в качестве изначального значения int, благодаря чему теперь дефолтно будет передаваться не строка, а число,
# help - что будет написано в справке

@click.argument("move", nargs=-1, type=str)
def hello(name, age, ball, move):  # функция вызывающая другие
    paren = name[0] + " " + name[1]
    postupok = ""
    for i in move:
        postupok += i
        postupok += " "
    # print(paren, " ", age, " ", ball, " ", postupok)
    if paren == "filter parney":
        if move[0] == "age":
            filter_po_age(move[1])
        if move[0] == "ball":
            filter_po_ball(move[1])
    else:
        #hochy_parnia(paren, age, ball, postupok)
        #print(paren_v_base(paren))
        dobav_ballov(paren, age, ball, postupok)
        #dobav_parnia(paren, age, ball, postupok)

try:
    connection = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        host="127.0.0.1",
        password="dash")
    if __name__ == '__main__':
        hello()

except (Exception, Error) as error:
    print("Ошибка при работе с PostgreSQL", error)

finally:
    if connection:
        connection.close()
        print("Соединение с PostgreSQL закрыто")

